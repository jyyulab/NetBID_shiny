{
  "0": {
    "id": "0",
    "title": "FAQ",
    "content": "Tutorial for Hidden driver (master regulator) estimation Q &amp; A: How to prepare eSet class object RData file ? Q &amp; A: How to use self-defined network files ? Q &amp; A: How to use if only has TF network without SIG network ? Q &amp; A: How to deploy the application by having pre-generated network files or calculation dataset ? Tutorial for Visualization Q &amp; A: How to share results with others by deploying the application by having pre-generated result RData dataset ? Other FAQ Q: What to do if there is an error message maximum upload size exceeded ? A: If there is an error message maximum upload size exceeded, please set options(shiny.maxRequestSize = 1000*1024^2) to a larger number. Here the options means the maximum request size is 1000mb. Q: How to publish the application to a remote server ? A: If user could run the server locally, he could directly call the function to open an application (check the Q&amp;A above). If deploy remotely, run the following code before deploying the application: ## define repo directory, here version 3.9 matches the R version 3.6.1 local({ r &lt;- getOption(&quot;repos&quot;) r[&quot;CRAN&quot;] &lt;- &quot;https://cran.rstudio.com/&quot; r[&quot;BioCsoft&quot;] &lt;- &quot;https://bioconductor.org/packages/3.9/bioc&quot; r[&quot;BioCann&quot;] &lt;- &quot;https://bioconductor.org/packages/3.9/data/annotation&quot; r[&quot;BioCexp&quot;] &lt;- &quot;https://bioconductor.org/packages/3.9/data/experiment&quot; options(repos = r) }) Deploy the first application for hidden driver analysis: search_network_path &lt;- &#39;data/network_txt/&#39; ## need to modify search_eSet_path &lt;- &#39;data/eSet_RData/&#39; ## need to modify pre_project_main_dir &lt;- &#39;MR_result/&#39; ## need to modify options(shiny.maxRequestSize = 1000*1024^2) ## set size for uploading files appDir &lt;- system.file(&#39;app_4MR/&#39;,package = &quot;NetBIDshiny&quot;) ## the directory for server.R and ui.R rsconnect::deployApp(appDir=appDir,appName=&#39;NetBIDshiny_forMR&#39;,server = &#39;shinyapps.io&#39;) Deploy the second application for result visualization: search_path &lt;- &#39;data/project_RData&#39; ## need to modify options(shiny.maxRequestSize = 1000*1024^2) ## set size for uploading files appDir &lt;- system.file(&#39;app_4Vis/&#39;,package = &quot;NetBIDshiny&quot;) ## the directory for server.R and ui.R rsconnect::deployApp(appDir=appDir,appName=&#39;NetBIDshiny_forVis1&#39;,server = &#39;shinyapps.io&#39;) In the current server.R, there will be one line to install the NetBID2 packages. Please pay attention if there will be some update on the github repo. devtools::install_github(&quot;jyyulab/NetBID2&quot;,ref=&#39;master&#39;,dependencies=&#39;Depends&#39;) If user want more modification, he could copy the code to another directory for further modification. Attention, the code script is not allowed for commercial usage without requiring for permission.",
    "url": "http://localhost:4000/docs/FAQ",
    "relUrl": "/docs/FAQ"
  },
  "1": {
    "id": "1",
    "title": "NetBIDshiny",
    "content": "NetBIDshiny: NetBID2 Shiny app for online hidden driver analysis and interactive visualization Online tutorial and documentation of NetBIDshiny. Get started now View it on GitHub Overview NetBIDshiny is a R Shiny web app, it provides an interactive online visualization tool for further analysis of drivers obtained from NetBID2. NetBID2 is the upgraded second version of NetBID, which is a data-driven systems biology algorithm, using network-based Bayesian inference approach to find drivers from transcriptomics, proteomics and phosphoproteomics data. The NetBID2 R package can be found at NetBID2, and online tutorial can be found at NetBID2 tutorial. Getting started Dependencies R, version &gt;= 3.6.0 NetBID2, version &gt;= 0.1.2 Quick start: install R package (NetBIDshiny) install the R package from github library(devtools) library(BiocManager) library(NetBID2) # set repos, for R version 3.6.0, Bioconductor version 3.9 local({ r &lt;- getOption(&quot;repos&quot;) r[&quot;CRAN&quot;] &lt;- &quot;https://cran.rstudio.com/&quot; r[&quot;BioCsoft&quot;] &lt;- &quot;https://bioconductor.org/packages/3.9/bioc&quot; r[&quot;BioCann&quot;] &lt;- &quot;https://bioconductor.org/packages/3.9/data/annotation&quot; r[&quot;BioCexp&quot;] &lt;- &quot;https://bioconductor.org/packages/3.9/data/experiment&quot; options(repos = r) }) install_github(&quot;jyyulab/NetBID_shiny&quot;,ref=&#39;master&#39;) OR, download the released source package from NetBIDshiny_0.1.0.tar.gz and install locally install.packages(&#39;NetBIDshiny_0.1.0.tar.gz&#39;,repos=NULL) Initiate the NetBIDShiny web app Call NetBIDshiny.run4MR() to initiate the app for master regulator identification or NetBIDshiny.run4Vis() to initiate the app for result visualization. library(NetBIDshiny) NetBIDshiny.run4Vis() NetBIDshiny.run4MR() Then open a browser and enter local url address (e.g: http://127.0.0.1:XXXX). Online server (not available yet) The public online version of NetBIDshiny can be found here under construction. This doesn’t require the local installation. Design manual The manual of all the NetBID2 functions is linked here NetBIDshiny_0.1.0.pdf. Tutorial We choose: the human MB (medulloblastoma) demo dataset from GEO database as in NetBID2: GSE116028, with network files generated by using the same dataset. the mouse BPD (bronchopulmonary dysplasia) demo dataset from GEO database GSE25286, with network files generated by using normal lung tissue from GTEx (human). Please check Tutorial for MR for the hidden driver estimation and Tutorial for visualization for result visualization. About the project For the detailed description of NetBID algorithm, please check our lab page View Yu Lab@St. Jude. Contact information: Email: xinran.dong@stjude.org or xinran.dong@foxmail.com License Distributed by an MIT license.",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "2": {
    "id": "2",
    "title": "Tutorial for hidden driver estimation",
    "content": "Tutorial for Hidden driver (master regulator) estimation The purpose of NetBIDshiny: provide an interactive online tool for hidden driver analysis and automatically output plots for top drivers. We choose: the human MB (medulloblastoma) demo dataset from GEO database as in NetBID2: GSE116028, with network files generated by using the same dataset. the mouse BPD (bronchopulmonary dysplasia) demo dataset from GEO database GSE25286, with network files generated by using normal lung tissue from GTEx (human). Quick Navigation Introduction to User Interface of NetBIDshiny Upload the eset Rdata and network data Select the options and start an analysis Quick demo for the mouse dataset Q &amp; A: How to prepare eSet class object RData file ? Q &amp; A: How to use self-defined network files ? Q &amp; A: How to use if only has TF network without SIG network ? Q &amp; A: How to deploy the application by having pre-generated network files or calculation dataset ? Start the app, here we could choose the settle down the project main directory (if not set here, user could choose the output directory in the application): NetBIDshiny.run4MR(project_main_dir=&#39;result/&#39;) Introduction to User Interface of NetBIDshiny The following screenshot is the user interface of NetBIDshiny, The user interface consists of 2 parts: Left panel is designed for uploading dataset, including the calculation dataset and two network files generated by SJAracne. Right panel is for the options of the uploaded dataset, and start an automatically hidden driver analysis. Upload the eset Rdata and network data We will use the human dataset in NetBIDshiny package as a demo. User could directly click the “LOAD THE DEMO DATA” button the skip this step and check the next part usage. For the calculation dataset, user could click the “BROWSE” button to upload the RData file or click the “CHOOSE THE RDATA FILE CONTAINING THE EXPRESSIONSET CLASS OBJECT” button to select the file in the local directory. For the two network files, similarly, user could choose to upload or choose from the local directory (this is essential if user want to deploy the app in a local lan environment, which could share network files by calculating or collecting them in advance). Select the options and start an analysis Click the “LOAD THE DATA” button, and follow the order of the box to select the options one by one and input the project name. After all required options fixed, the page will be like this: Click the “START THE DRIVER ESTIMATION ANALYSIS”, wait (about 1~2 mins) until the Result message update like this: If check the “Do plot for the top drivers” and the plot for top drivers will also be generated, which will take more time (about 1 mins). If user input the project_main_dir in running the application, user need to click to download the zipped result file; otherwise, user need to select the output directory in previous step and need to follow the instructions on the page to find the output files. The result files will be structured like this: A README.txt file is generated in the output directory to record the options in this analysis. The DATA/ directory contains the result dataset, the final RData file including network structure, calculation dataset, inferred activity, differentiated statistics and final master table for all tested drivers. The excel file is the formatted result file for all drivers. The QC/ directory contains QC plots (if check the Do QC plot for the network and activity eset) The PLOT/ directory contains plots for top drivers (if check the Do plot for the top drivers) Quick demo for the mouse dataset We could input the mouse dataset but select human network files. In this condition, NetBID2 will automatically do ID transfer for the input mouse dataset and the final output will be at the human ID level. User could try the demo dataset in NetBIDshiny package: Q &amp; A: How to prepare eSet class object RData file ? NetBID2 has provided lots of functions to assist eSet class object preparation. Here, we show the codes of how to prepare the mouse eSet class object RData file: mouse_eset &lt;- load.exp.GEO(GSE=&#39;GSE25286&#39;,GPL=&#39;GPL1261&#39;,out.dir = &#39;mouse_BPD/&#39;) mouse_eset &lt;- update_eset.phenotype(mouse_eset,use_col=&#39;GEO-auto&#39;) mouse_eset &lt;- update_eset.feature(mouse_eset,use_feature_info = fData(mouse_eset), from_feature = &#39;ID&#39;,to_feature = &#39;Gene Symbol&#39;) save(mouse_eset,file=&#39;mouse_BPD/eset.RData&#39;) Considering the complexity of gene expression profile dataset, we do not provide function to directly generate eSet class file in NetBIDshiny. User could use generate.eset() function in NetBID2 as a help. Q &amp; A: How to use self-defined network files ? We have prepared a network in the package of NetBIDshiny, only two columns are required if user want to use networks not generated by SJAracne. User need to name those two columns by source and target to indicate network direction. All nodes in the source column will be treated as drivers in estimation. Q &amp; A: How to use if only has TF network without SIG network ? In order to avoid condition that user forget to upload network files, we have prepared an empty network file in the NetBIDshiny package (empty_network.txt). User could choose to upload or select this network file if do not want other SIG network. (Same for only has SIG network without TF network) Q &amp; A: How to deploy the application by having pre-generated network files or calculation dataset ? There are three options for running NetBIDshiny.run4MR(). – search_network_path: path for network data searching in the application server. User could choose from: ‘Current Directory’,’Home’,’R Installation’,’Available Volumes’, and could put user-defined server path (better use absolute path). Default is c(‘Current Directory’,’Home’). If set to NULL, only ‘Current Directory’ will be used. – search_eSet_path: path for expressionSet class RData searching in the application server. User could choose from: ‘Current Directory’,’Home’,’R Installation’,’Available Volumes’, and could put user-defined server path (better use absolute path). Default is c(‘Current Directory’,’Home’). If set to NULL, only ‘Current Directory’ will be used. – project_main_dir: absolute path of the main working directory for driver analysis. If NULL, the server will add a new button for user to select the output directory. Default is NULL. If not NULL, there will be an additional link in the result page for downloading the zip file containing all information. If user want to deploy the application with pre-generated network files, he could run the application like this (below is the screenshot for the data directory for our online version, the code is slightly different to the code in the package and we use the original code for deploying): And put the output directory as options to run the application: NetBIDshiny.run4MR(search_network_path=&#39;data/network_txt&#39;, search_eSet_path=&#39;data/eSet_RData&#39;, project_main_dir=&#39;MR_result/&#39;) Thus, user could only select files under the defined directories.",
    "url": "http://localhost:4000/docs/tutorial4MR",
    "relUrl": "/docs/tutorial4MR"
  },
  "3": {
    "id": "3",
    "title": "Tutorial for Visualization",
    "content": "Tutorial for Visualization The purpose of NetBIDshiny: provide an interactive online visualization tool for further analysis of drivers. We use the same demo data set as in NetBID2, from GEO database: GSE116028. This microarray dataset contains 13 adult medulloblastoma (MB) samples. Three phenotype subgroups of adult MB have been identified from distinguishabled expression profiles, clinical features, pathological features and prognosis. These subgroups together with their sample numbers are, 3 SHH, 4 WNT, and 6 Group4. Group4 tumors in adult have significantly worse progression-free and overall survival, compared to other molecular subtypes of tumor. Here, the goal is to find potential drivers in Group4 compared to other subtypes using NetBID2. This may relate to specific clinical feature of Group4 MB subtype. Quick Navigation Introduction to User Interface of NetBIDshiny Upload the RData Navigate through the master table Plots VOLCANO_PLOT: quickly identify the top differentially expressed/activated drivers NETBID_PLOT: get the statistics of the top differentially expressed/activated drivers GSEA_PLOT: get the detailed statistics of the top differentially expressed/activated drivers HEATMAP: get the expression/activity pattern of the top drivers across all samples FUNCTION_ENRICH_PLOT: get the functional annotation for the top drivers BUBBLE_PLOT: get the functional annotation for the top drivers and their target genes TARGET_NET: show the sub-network structure of one selected driver CATEGORY_BOXPLOT: get the distribution of one driver’s expression/activity value across group samples Q &amp; A: How to share results with others by deploying the application by having pre-generated result RData dataset ? Start the app: NetBIDshiny.run4Vis() Introduction to User Interface of NetBIDshiny The following screenshot is the user interface of NetBIDshiny, The user interface consists of 4 parts: Top left is for target dataset manipulation. Users can upload the target Rdata from local path, choose species name, analysis level and ID type for analysis. We also provide a button to load the demo dataset, so users can have a taste of how NetBIDshiny works. Bottom left is for master table display. Each row is a driver, containing all the statistics calculated by NetBID2 analysis. Top right is for plot type selection, with plot type tabs and options. Bottom right is the plot panel. It includes adjusting bars and figure download button. Users can save the plot as PNG by right click, or click the button to download it as PDF. Plot types and tabs: VOLCANO_PLOT, the volcano plot used to quickly identify the top differentially expressed/activated drivers. Created by draw.volcanoPlot() in NetBID2. NETBID_PLOT, the NETBID plot used to get the statistics of the top differentially expressed/activated drivers. Created by draw.NetBID() in NetBID2. GSEA_PLOT, the GSEA plot used to get the detailed statistics of the top differentially expressed/activated drivers. Created by draw.GSEA.NetBID() in NetBID2. HEATMAP, the heatmap used to get the expression/activity pattern of the top drivers across all samples. Created by draw.heatmap() in NetBID2. FUNCTION_ENRICH_PLOT, the Function Enrichment plot used to get the functional annotation for the top drivers. Created by draw.funcEnrich.cluster() in NetBID2. BUBBLE_PLOT, the bubble plot used to get the functional annotation for the top drivers and their target genes. Created by draw.bubblePlot() in NetBID2. TARGET_NET , the Target Network plot used to show the sub-network structure of one selected driver. Created by draw.targetNet() and draw.targetNet.TWO() in NetBID2. CATEGORY_PLOT, the grouped box plot used to get the distribution of one driver’s expression/activity value across group samples. Created by draw.categoryValue() in NetBID2. Upload the RData Before start, take a quick review of the target RData generation. The input RData is a super list object analysis.par with multiple elements wrapped inside, which including the master table. It is created by the “Driver Estimation” step in NetBID2 analysis. It is saved as RData using this command NetBID.saveRData(analysis.par=analysis.par,step=&#39;ms-tab&#39;). For details, please check the drivers estimation pipeline from NetBID2 online tutorial. The RData is saved in analysis.par$out.dir.DATA directory, with file name analysis.par.Step.ms-tab.RData. Details about the analysis.par Rdata: main.dir, the main directory of the project, required by NetBIDshiny. project.name, the project name, required by NetBIDshiny. merge.network, a list with three elements (target_list, igraph_obj and target_net) which contains the detailed network structure from the NetBID, required by NetBIDshiny. cal.eset, an ExpressionSet class object storing the expression matrix, phenotype information and feature informaiton, required by NetBIDshiny. merge.ac.eset, an ExpressionSet class object for the activity value of the analysis dataset, required for NetBIDshiny. final_ms_tab, a data frame containing detailed results for all tested drivers, required by NetBIDshiny. transfer_tab, a data frame for ID conversion. It is suggested but not required to run NetBIDshiny. If it is not included in the uploading RData, NetBIDshiny will automatically generate one. out.dir (out.dir.QC, out.dir.DATA, out.dir.PLOT), the directory and sub-directories of NetBID project, not required by NetBIDshiny. DE and DA, contain detailed differential expression (DE)/activity (DA) statistics, not required by NetBIDshiny. Upload the RData. Click the BROWSE button and select the target RData file from your PC. Then, please choose: the species name in the select list (currently only 11 species is allowed, due to the MSigDB annotation limitation). the gene/transcript level, this is the level of the driver’s main ID type. the main ID type, please select the ID type for your drivers (the select list has 10 most common ID types). If it is not listed, user can enter it manually in the textbox on the right. For access to the full list of allowed ID types, please check biomaRt or try the scripts below. ensembl &lt;- useMart(&quot;ensembl&quot;, dataset=&quot;hsapiens_gene_ensembl&quot;) listAttributes(ensembl) If there is an error message maximum upload size exceeded, please set options(shiny.maxRequestSize = 300*1024^2) to a larger number. Here the options means the maximum request size is 300mb. Then click the LOAD/RELOAD THE UPLOADED RDATA button to load the target RData. For demo RData, user can directly click the LOAD/RELOAD THE DEMO RDATA button. After the upload of the targe RData, the master table and the “NOTE” messages will be displayed. And the VOLCANO_PLOT,TARGET_NET, CATEGORY_PLOT tabs are available. Now the interface will look like this, As shown above, the “NOTE” messages show the project name, main directory, the species name, analysis level, main ID type and the number of TF (transcription factors) and SIG (signalling factors). If the first selection is wrong, user can re-select everything and click LOAD/RELOAD THE UPLOADED RDATA button for reload. About data uploading time. It will take 3~4 seconds for the demo dataset to upload. If your target dataset is large but contains the ID conversion table, for example the RData size is about 120 MB, it will take 10~15 seconds for uploading. Otherwise it will take longer time to upload (20~40 seconds from test), because acquiring data from bioMart website takes time (varies from the internet speed). User could also choose the RData file pre-saved in the application folders by click the CHOOSE THE MASTER TABL RDATA FILE (this function is very important for result sharing): Navigate through the master table The bottom left of the interface displays the master table. User can search the whole table by keywords and sort columns by clicking the column names. The first four columns are freezed. For one master table, it consists of three parts: The first six columns are gene_label, geneSymbol, originalID, originalID_label, funcType and Size. gene_label is the driver’s gene symbol or transcript symbol, with suffix “_TF” or “_SIG” to show driver’s type. geneSymbol is the driver’s gene symbol or transcript symbol, without suffix. originalID is the original ID type used in network construction, which should match the ID type in analysis.par$cal.eset, analysis.par$DE. originalID_label is the original ID type with suffix “_TF” or “_SIG”, which should match the the ID type in analysis.par$merge.network, analysis.par$merge.ac.eset,analysis.par$DA. originalID_label is the only column to ensure unique ID for row record. funcType is either “TF” or “SIG” to mark driver’s type. Size is number of target genes for the driver. The statistical columns are named as prefix.comp_name_{DA or DE}. The prefix can be Z, P.Value, logFC or AveExpr to indicate which statistical value is stored. The comp_name is the comparison name. For example, Z.G4.Vs.WNT_DA means the Z-statistics of the differential activity (DA) calculated from comparison between phenotype G4 and phenotype WNT. The color shade of the background indicated the significance of Z-statistics. The next 13 columns (from ensembl_gene_id to refseq_mrna) are detailed information of genes. The last columns (optional) are the detailed information of marker genes, users use mark_strategy=&#39;add_column&#39; to set. Plots VOLCANO_PLOT: quickly identify the top differentially expressed/activated drivers The volcano plot is IMPORTANT in NetBIDshiny, because the activation of NETBID_PLOT, GSEA_PLOT, HEATMAP, FUNCTION_ENRICH_PLOT and BUBBLE_PLOT is highly dependent on that. If draw these plots without the activation of the volcano plot, a warning message will show up (“Please plot volcano plot first in order to choose the targeted comparison !””). Since the differential expression (DE)/activity (DA) statistics are calculated from certain comparisons, users need to choose which comparison to visualize. Users can also adjust the threshold for P-values, logFC and driver’s target size. Here, we selected G4.Vs.others_DA as the comparison, and chose the logFC column and P-value column (if not chosen, it will automatically change to the columns related to the comparison). Set the logFC threshold to 0.3, P-value threshold to 1e-8, minimum target size to 30 and maximum target size to 1000, and checked the Display significant items on plot? box. The plot created is shown as below, At the bottom, the MESSAGE shows that 48 drivers have passed by the filter. User can modify the selections to get another top driver list. Click the UPDATE THE MASTER TABLE BY USING THE PARAMETERS AND TOP NUMBER ABOVE button after selection, the interface will look like this, NOTE: In the NETBID_PLOT, GSEA_PLOT, HEATMAP, FUNCTION_ENRICH_PLOT and BUBBLE_PLOT, the top list is based on the ranking of the Z-statistics. If user only want the Z-statistics as the criteria to get the top driver list, it is not necessary to update the master table. Otherwise, the update step is necessary. (For example, if user only want to focus on drivers with target size ranges from 30 to 500, he need to set this filter and update the master table first). When user click the UPDATE THE MASTER TABLE BY USING THE PARAMETERS AND TOP NUMBER ABOVE button, he will need to re-do the valcano plot step to define the main comparison again. NETBID_PLOT: get the statistics of the top differentially expressed/activated drivers GSEA_PLOT: get the detailed statistics of the top differentially expressed/activated drivers HEATMAP: get the expression/activity pattern of the top drivers across all samples FUNCTION_ENRICH_PLOT: get the functional annotation for the top drivers It uses the annotation from MSigDB database. User can choose multiple categories of gene sets and related statistics for calculation. As long as the main category is selected, all the gene sets from that category will be used, regardless of the selection of sub-category. For example, if user choose the ‘C5:GO’ main category, all ‘BP’, ‘MF’, ‘CC’ will be used. BUBBLE_PLOT: get the functional annotation for the top drivers and their target genes It uses the annotation from MSigDB database. The plot creation will take some time (around several seconds). The figure size could be very large and inconvenient to see. We suggest to download it as PDF. TARGET_NET: show the sub-network structure of one selected driver For a better visualization of this highly overlapped network structure, we offer the adjustment of text size cex and number of layers. If add one more interested driver, it will draw a shared sub-network with overlapped target genes in the middle. CATEGORY_BOXPLOT: get the distribution of one driver’s expression/activity value across group samples Users can choose which phenotype feature to display. Q &amp; A: How to share results with others by deploying the application by having pre-generated result RData dataset ? There is one option for running NetBIDshiny.run4Vis(). – search_path, path for master table Rdata searching in the app server. User could choose from: ‘Current Directory’,’Home’,’R Installation’,’Available Volumes’, and could put user-defined server path (better use absolute path). Default is c(‘Current Directory’,’Home’). If set to NULL, only ‘Current Directory’ will be used. If user want to deploy the application with pre-generated result RData files, he could run the application like this (below is the screenshot for the data directory for our online version, the code is slightly different to the code in the package and we use the original code for deploying. ): And put the output directory as option to run the application: NetBIDshiny.run4Vis(search_path=&#39;data/project_RData/&#39;)",
    "url": "http://localhost:4000/docs/tutorial4Vis",
    "relUrl": "/docs/tutorial4Vis"
  }
  
}
